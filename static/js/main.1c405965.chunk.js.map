{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","id","state","username","password","edit_username","edit_password","list","usernameInput","createRef","handleChange","e","target","value","name","setState","handleInsert","preventDefault","concat","editMode","current","focus","handleDelete","filter","user","handleModify","map","handleSave","this","onSubmit","onChange","ref","type","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAuKeA,E,4MApKdC,GAAK,E,EAELC,MAAQ,CACPC,SAAU,GACVC,SAAU,GACVC,cAAe,GACfC,cAAe,GACfC,KAAM,I,EAGPC,cAAgBC,sB,EAEhBC,aAAe,SAACC,GAAO,IAAD,EACGA,EAAEC,OAAlBC,EADa,EACbA,MAAOC,EADM,EACNA,KACf,EAAKC,SAAL,eACED,EAAOD,K,EAIVG,aAAe,SAACL,GACfA,EAAEM,iBADmB,MAEgB,EAAKf,MAAlCK,EAFa,EAEbA,KAAMJ,EAFO,EAEPA,SAAUC,EAFH,EAEGA,SACxB,EAAKW,SAAS,CACbZ,SAAU,GACVC,SAAU,GACVG,KAAMA,EAAKW,OAAO,CACjBf,WACAC,WACAe,UAAU,EACVlB,GAAI,EAAKA,OAIX,EAAKA,KACL,EAAKO,cAAcY,QAAQC,S,EAG5BC,aAAe,SAACrB,GAEf,EAAKc,SAAS,CACbR,KAAM,EAAKL,MAAMK,KAAKgB,QAAO,SAACC,GAAD,OAAUA,EAAKvB,KAAOA,Q,EAIrDwB,aAAe,SAACxB,GAAO,IAEdM,EAAS,EAAKL,MAAdK,KACR,EAAKQ,SAAS,CACbR,KAAMA,EAAKmB,KAAI,SAACF,GACf,OAAIA,EAAKL,SACD,eACHK,EADJ,CAECL,UAAU,IAGRK,EAAKvB,KAAOA,GACf,EAAKc,SAAS,CACbV,cAAemB,EAAKrB,SACpBG,cAAekB,EAAKpB,WAEd,eACHoB,EADJ,CAECL,UAAU,KAGLK,Q,EAKVG,WAAa,SAAC1B,GAAO,MAE2B,EAAKC,MAA5CK,EAFY,EAEZA,KAAMF,EAFM,EAENA,cAAeC,EAFT,EAESA,cAC7B,EAAKS,SAAS,CACbR,KAAMA,EAAKmB,KAAI,SAACF,GACf,OAAIA,EAAKvB,KAAOA,GACf,EAAKc,SAAS,CACbV,cAAe,GACfC,cAAe,KAET,eACHkB,EADJ,CAECrB,SAAUE,EACVD,SAAUE,EACVa,UAAU,KAGLK,Q,uDAKA,IAAD,SAOJI,KAAK1B,MALRK,EAFO,EAEPA,KACAJ,EAHO,EAGPA,SACAC,EAJO,EAIPA,SACAC,EALO,EAKPA,cACAC,EANO,EAMPA,cAED,OACC,6BACC,0BAAMuB,SAAUD,KAAKZ,cACpB,6BACC,2BACCH,MAAOV,EACPW,KAAK,WACLgB,SAAUF,KAAKlB,aACfqB,IAAKH,KAAKpB,gBAEX,2BACCK,MAAOT,EACPU,KAAK,WACLgB,SAAUF,KAAKlB,eAEhB,4BAAQsB,KAAK,UAAb,8BAIF,4BACEzB,EAAKmB,KAAI,SAACF,GACV,OACC,wBAAIS,IAAKT,EAAKvB,IACZuB,EAAKrB,SADP,yCACyBqB,EAAKpB,SAD9B,uBAEC,6BACA,4BAAQ8B,QAAS,kBAAM,EAAKZ,aAAaE,EAAKvB,MAA9C,4BAGA,4BAAQiC,QAAS,kBAAM,EAAKT,aAAaD,EAAKvB,MAA9C,4BAGCuB,EAAKL,SACL,0BACCU,SAAU,SAAClB,GACVA,EAAEM,iBACF,EAAKU,WAAWH,EAAKvB,MAGtB,6BACC,2BACCY,MAAOR,EACPS,KAAK,gBACLgB,SAAU,EAAKpB,eAEhB,2BACCG,MAAOP,EACPQ,KAAK,gBACLgB,SAAU,EAAKpB,eAEhB,4BAAQsB,KAAK,UAAb,kBAIF,a,GA1JSG,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1c405965.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\n\nclass App extends Component {\n\tid = 1;\n\n\tstate = {\n\t\tusername: '',\n\t\tpassword: '',\n\t\tedit_username: '',\n\t\tedit_password: '',\n\t\tlist: []\n\t};\n\n\tusernameInput = createRef();\n\n\thandleChange = (e) => {\n\t\tconst { value, name } = e.target;\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t});\n\t};\n\n\thandleInsert = (e) => {\n\t\te.preventDefault();\n\t\tconst { list, username, password } = this.state;\n\t\tthis.setState({\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tlist: list.concat({\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\teditMode: false,\n\t\t\t\tid: this.id\n\t\t\t})\n\t\t});\n\n\t\tthis.id++;\n\t\tthis.usernameInput.current.focus();\n\t};\n\n\thandleDelete = (id) => {\n\t\t//삭제하기 버튼 클릭 이벤트\n\t\tthis.setState({\n\t\t\tlist: this.state.list.filter((user) => user.id !== id)\n\t\t});\n\t};\n\n\thandleModify = (id) => {\n\t\t//수정하기 버튼 클릭 이벤트\n\t\tconst { list } = this.state;\n\t\tthis.setState({\n\t\t\tlist: list.map((user) => {\n\t\t\t\tif (user.editMode) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\teditMode: false\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (user.id === id) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tedit_username: user.username,\n\t\t\t\t\t\tedit_password: user.password\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\teditMode: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn user;\n\t\t\t})\n\t\t});\n\t};\n\n\thandleSave = (id) => {\n\t\t//저장 버튼 클릭 이벤트\n\t\tconst { list, edit_username, edit_password } = this.state;\n\t\tthis.setState({\n\t\t\tlist: list.map((user) => {\n\t\t\t\tif (user.id === id) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tedit_username: '',\n\t\t\t\t\t\tedit_password: ''\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\tusername: edit_username,\n\t\t\t\t\t\tpassword: edit_password,\n\t\t\t\t\t\teditMode: false\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn user;\n\t\t\t})\n\t\t});\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tlist,\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tedit_username,\n\t\t\tedit_password\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.handleInsert}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={username}\n\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tref={this.usernameInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button type=\"submit\">추가하기</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\n\t\t\t\t<ul>\n\t\t\t\t\t{list.map((user) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={user.id}>\n\t\t\t\t\t\t\t\t{user.username}의 비밀번호는 {user.password} 입니다.\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<button onClick={() => this.handleDelete(user.id)}>\n\t\t\t\t\t\t\t\t\t삭제하기\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button onClick={() => this.handleModify(user.id)}>\n\t\t\t\t\t\t\t\t\t수정하기\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t{user.editMode ? (\n\t\t\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\t\t\tonSubmit={(e) => {\n\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\t\tthis.handleSave(user.id);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={edit_username}\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"edit_username\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={edit_password}\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"edit_password\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\">저장</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}